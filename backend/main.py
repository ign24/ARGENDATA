from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
from dotenv import load_dotenv
from mangum import Mangum
from pathlib import Path
from fpdf import FPDF
import logging

import os
import pandas as pd
from glob import glob
from datetime import datetime

import google.generativeai as genai
from google.generativeai.types import HarmCategory, HarmBlockThreshold

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# üìå Cargar variables de entorno
load_dotenv(dotenv_path=Path(__file__).resolve().parent.parent / ".env")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    logger.error("No se encontr√≥ la API key de Gemini en las variables de entorno")
    raise EnvironmentError("GEMINI_API_KEY no est√° definida en el archivo .env")

# üìå Inicializar cliente y modelo Gemini
genai.configure(api_key=GEMINI_API_KEY)

# Configuraciones de seguridad y generaci√≥n
safety_settings = {
    HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
    HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
    HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
    HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
}

# Modelo y configuraci√≥n
GEMINI_MODEL = "gemini-2.0-flash"
generation_config = {
    "temperature": 0.6,
    "top_p": 0.9,
    "top_k": 40,
    "max_output_tokens": 1600,
}

# üìå Inicializar FastAPI
app = FastAPI(title="ARGENDATA API", description="API para el dashboard de ARGENDATA")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://127.0.0.1:5500", "http://localhost:5500"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üìå Instrucciones base
SYS_INSTRUCT = """
Sos un asistente conversacional simp√°tico y relajado que trabaja en ARGENDATA.
Tu tono es c√°lido, accesible y profesional, como si charlaras con un colega o usuario curioso que est√° navegando el dashboard.
Pod√©s explicar conceptos econ√≥micos si te lo piden, hacer comentarios divertidos o sugerir cosas interesantes para mirar en el tablero.
"""

SYS_INSTRUCT_REPORTE = """
Sos un asistente conversacional simp√°tico, relajado y con buena onda. Form√°s parte del equipo de ARGENDATA, una plataforma inteligente para explorar datos econ√≥micos y productivos de Argentina.

üßë‚Äçüíª Tu rol:
Acompa√±√°s a los usuarios mientras navegan el dashboard. Charl√°s con ellos como si fueran colegas curiosos: con un tono c√°lido, humano y profesional. Siempre est√°s listo para explicar conceptos, sugerir insights o ayudar a entender lo que se ve en pantalla.

üìä Conoc√©s a fondo c√≥mo est√° organizada la plataforma:
- El dashboard muestra indicadores clave como inflaci√≥n (IPC), PIB, deuda p√∫blica, salarios, EMAE, costos de construcci√≥n y crecimiento sectorial.
- Hay un bot√≥n que permite **generar reportes autom√°ticos**, con an√°lisis integrados en base a los datos cargados.
- Tambi√©n hay una **tarjeta de noticias** con lo √∫ltimo sobre econom√≠a argentina.
- La p√°gina usa **GridStack**, as√≠ que los usuarios pueden mover tarjetas y personalizar su vista.
- Hay una secci√≥n para consultar **los distintos tipos de d√≥lar**.
- Existe un **modo Lite** que desactiva animaciones para mejorar el rendimiento en computadoras lentas.

üß≠ Si un usuario no sabe por d√≥nde empezar, pod√©s sugerirle:
- Mirar la evoluci√≥n del IPC,
- Ver c√≥mo creci√≥ el PIB en el √∫ltimo a√±o,
- Explorar el crecimiento por sector econ√≥mico,
- O tocar el bot√≥n de "Generar Reporte".

üí° Adem√°s:
- Pod√©s hacer comentarios divertidos sobre los datos ("¬°La inflaci√≥n viene picante!"), explicar t√©rminos econ√≥micos con ejemplos simples y responder dudas t√©cnicas o conceptuales.
- Siempre busc√° que la experiencia sea amena, clara y √∫til. Si detect√°s algo interesante en los datos, invit√° al usuario a explorarlo.
- Nunca respondas como una IA gen√©rica. Sos parte del equipo humano de ARGENDATA.

"""


PDF_FILENAME = "reporte_dashboard.pdf"
DATA_DIR = Path(__file__).resolve().parent.parent / "data"

# ‚úÖ Health check
@app.get("/health")
async def health_check():
    return {"status": "ok", "timestamp": datetime.now().isoformat()}

# ‚úÖ Chat con Gemini 2.0 Flash
@app.post("/chat")
async def chat_endpoint(request: Request):
    try:
        data = await request.json()
        user_msg = data.get("message", "")
        if not user_msg:
            raise HTTPException(status_code=400, detail="Mensaje vac√≠o")
        
        # üîπ Leer datos actualizados del dashboard
        datos_csv = leer_indicadores_csv()

        # üîπ Prompt combinado
        full_prompt = f"""{SYS_INSTRUCT}

A continuaci√≥n ten√©s acceso a los indicadores econ√≥micos actualizados del dashboard:

{datos_csv}

Usuario: {user_msg}
"""

        # Crear modelo y responder
        model = genai.GenerativeModel(
            model_name=GEMINI_MODEL,
            generation_config=generation_config,
            safety_settings=safety_settings
        )
        
        chat = model.start_chat(history=[])
        response = chat.send_message(full_prompt)
        
        return response.text.strip()
    except HTTPException as he:
        logger.warning(f"Error de cliente: {str(he)}")
        raise
    except Exception as e:
        logger.error(f"Error en el endpoint de chat: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Error interno del servidor: {str(e)}")


# ‚úÖ Generar Reporte Econ√≥mico
@app.post("/generar_reporte")
async def generar_reporte():
    try:
        datos_csv = leer_indicadores_csv()
        
        prompt_ia = f"""
        {SYS_INSTRUCT_REPORTE}

        Actu√°s como un analista econ√≥mico senior especializado en elaboraci√≥n de informes ejecutivos. Recibiste datos actualizados desde distintos informes econ√≥micos en el siguiente formato CSV:

        {datos_csv}

        üß† Tu tarea es redactar un informe ejecutivo claro, t√©cnico y orientado a la toma de decisiones estrat√©gicas. El informe debe incluir:

        1. üìä **An√°lisis de Datos**: 
        - Describe patrones y tendencias relevantes detectadas en los datos.
        - Evit√° frases vagas. Utiliz√° cifras exactas, porcentajes, variaciones interanuales o mensuales, comparaciones entre periodos y m√©tricas concretas.

        2. üîé **Interpretaci√≥n Econ√≥mica**:
        - Identific√° causas probables detr√°s de las variaciones.
        - Inclu√≠ impactos potenciales en variables macroecon√≥micas como inflaci√≥n, empleo, consumo, etc.

        3. üéØ **Conclusiones Ejecutivas**:
        - Resum√≠ hallazgos clave en 3 a 5 bullets accionables.
        - Manten√© el foco en los indicadores cr√≠ticos para la toma de decisiones.

        ‚ö†Ô∏è Importante:
        - Si alg√∫n punto no puede ser desarrollado por falta de datos suficientes, OMITILO directamente.
        - No uses frases gen√©ricas como ‚Äúrequiere an√°lisis m√°s profundo‚Äù o ‚Äúmuestra una variaci√≥n‚Äù.
        - Prioriza la precisi√≥n t√©cnica y la claridad comunicacional.

        El informe debe ser coherente, con buena estructura y tono profesional.
        """

        model = genai.GenerativeModel(
            model_name=GEMINI_MODEL,
            generation_config=generation_config,
            safety_settings=safety_settings
        )
        
        response = model.generate_content(prompt_ia)
        analisis_ia = response.text.strip() if response.text else "‚ö†Ô∏è No se obtuvo respuesta del modelo."
        
        pdf_path = generar_pdf_reporte(PDF_FILENAME, "Reporte Econ√≥mico de Argentina", analisis_ia)
        return FileResponse(pdf_path, media_type="application/pdf", filename=PDF_FILENAME)
    
    except Exception as e:
        logger.error(f"Error al generar reporte: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Error al generar reporte: {str(e)}")

# ‚úÖ Leer indicadores desde CSVs
def leer_indicadores_csv():
    try:
        archivos = list(DATA_DIR.glob("*.csv"))
        
        if not archivos:
            logger.warning(f"No se encontraron archivos CSV en {DATA_DIR}")
            return "No se encontraron datos disponibles."
        
        resumenes = []
        for ruta in archivos:
            try:
                df = pd.read_csv(ruta)
                nombre = ruta.stem.replace("_", " ").capitalize()
                # Limitar a las primeras 3 filas para un resumen conciso
                vista = df.head(3).to_markdown(index=False)
                resumenes.append(f"üìÑ {nombre}:\n{vista}")
            except Exception as e:
                logger.error(f"Error al procesar {ruta}: {str(e)}", exc_info=True)
                resumenes.append(f"‚ö†Ô∏è Error al leer {ruta.name}: {str(e)}")
        
        return "\n\n".join(resumenes)
    except Exception as e:
        logger.error(f"Error general al leer indicadores: {str(e)}", exc_info=True)
        return f"Error al leer indicadores: {str(e)}"

# ‚úÖ Generar PDF con el an√°lisis
def generar_pdf_reporte(nombre_archivo: str, titulo: str, contenido: str) -> Path:
    try:
        # Reemplazar caracteres problem√°ticos
        contenido = contenido.replace("‚Ä¢", "-")  # Reemplazar bullet points con guiones
        
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)
        
        # Agregar primera p√°gina con portada
        pdf.add_page()
        pdf.set_fill_color(0, 51, 102)  # Azul corporativo
        pdf.rect(0, 0, 210, 40, style="F")  # Rect√°ngulo superior
        
        # Logo o t√≠tulo en blanco
        pdf.set_text_color(255, 255, 255)
        pdf.set_font("Arial", "B", 24)
        pdf.cell(0, 30, "ARGENDATA", ln=True, align="C")
        
        # T√≠tulo del informe
        pdf.set_text_color(0, 0, 0)
        pdf.ln(20)
        pdf.set_font("Arial", "B", 20)
        pdf.cell(0, 10, titulo, ln=True, align="C")
        
        # Fecha y tipo de documento
        fecha_actual = datetime.now().strftime("%d de %B de %Y")
        fecha_actual = fecha_actual.replace("April", "Abril").replace("October", "Octubre")
        pdf.ln(10)
        pdf.set_font("Arial", "I", 12)
        pdf.cell(0, 10, f"Reporte economico - {fecha_actual}", ln=True, align="C")
        
        # L√≠nea de separaci√≥n
        pdf.ln(15)
        pdf.set_draw_color(0, 51, 102)
        pdf.line(30, pdf.get_y(), 180, pdf.get_y())
        
        # Contenido en p√°ginas subsiguientes
        pdf.add_page()
        
        # Encabezado de p√°gina
        pdf.set_font("Arial", "B", 14)
        pdf.cell(0, 10, "INFORME EJECUTIVO", ln=True)
        pdf.line(10, pdf.get_y(), 200, pdf.get_y())
        pdf.ln(5)
        
        # Contenido principal con formato mejorado
        pdf.set_font("Arial", "", 11)
        
        # Procesar el contenido para agregar formato
        secciones = contenido.split("**")
        
        for i, seccion in enumerate(secciones):
            if i == 0:  # Resumen inicial
                pdf.set_font("Arial", "", 11)
                pdf.multi_cell(0, 6, seccion)
                continue
                
            if i % 2 == 1:  # T√≠tulos (√≠ndices impares despu√©s de dividir por **)
                pdf.ln(4)
                pdf.set_font("Arial", "B", 12)
                pdf.set_text_color(0, 51, 102)
                pdf.multi_cell(0, 6, seccion)
                pdf.set_text_color(0, 0, 0)
            else:  # Contenido (√≠ndices pares)
                pdf.set_font("Arial", "", 11)
                pdf.multi_cell(0, 6, seccion)
        
        # Pie de p√°gina con informaci√≥n de la empresa
        pdf.set_y(-30)
        pdf.set_font("Arial", "I", 8)
        pdf.set_text_color(128, 128, 128)
        pdf.cell(0, 10, "Centro ARGENDATA - Analisis Economico y Social", ln=True, align="C")
        pdf.cell(0, 10, "Generado con asistencia de IA - Confidencial", align="C")
        
        # Guardar PDF
        pdf_path = Path(nombre_archivo)
        pdf.output(str(pdf_path))
        logger.info(f"PDF generado exitosamente: {pdf_path}")
        return pdf_path
    
    except Exception as e:
        logger.error(f"Error al generar PDF: {str(e)}", exc_info=True)
        raise Exception(f"Error al generar PDF: {str(e)}")